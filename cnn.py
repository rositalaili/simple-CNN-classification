# -*- coding: utf-8 -*-
"""CNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10gxH1S0_0AzJCldD9uv8wiP-VoqVLX6_
"""

# Import packages and set numpy random seed
import numpy as np
np.random.seed(7)
import tensorflow as tf
mnist = tf.keras.datasets.mnist

from keras.utils import np_utils

# load data
(X_train, y_train), (X_test, y_test) = mnist.load_data()
print(X_train.shape)
print(y_train.shape)
print(X_test.shape)
print(y_test.shape)

import matplotlib.pyplot as plt
plt.imshow(X_train[0])
plt.show()
plt.imshow(X_train[0], cmap=plt.cm.binary)

print(X_train[0])

X_train = tf.keras.utils.normalize(X_train,axis=1)
X_test = tf.keras.utils.normalize(X_test,axis=1)
plt.imshow(X_train[0], cmap=plt.cm.binary)

print(X_train[0])

print(y_train[0])

# Resize gambar ke 1 dimensi
img_size = 28
x_train = np.array(X_train).reshape(-1,img_size,img_size,1)
x_test = np.array(X_test).reshape(-1,img_size,img_size,1)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, Activation, Flatten, Conv2D, MaxPooling2D

6# create model
model = Sequential()
# layer conv pertama
model.add(Conv2D(64, (3, 3), input_shape=x_train.shape[1:], activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

#layer conv kedua
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

#layer conv ketiga
model.add(Conv2D(64,(3,3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

#model.add(Dropout(0.2))
model.add(Flatten())
model.add(Dense(64, activation='relu'))

model.add(Dense(32, activation='relu'))
model.add(Dense(10, activation='softmax'))
model.summary()

# compile model
model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

print(len(x_train))
print(len(y_train))

# Fit the model
model.fit(x_train, y_train, epochs=5, validation_split = 0.3, batch_size=1)

test_loss, test_acc = model.evaluate(x_test, y_test, batch_size=1)
print("test loss on 10000 test samples", test_loss)
print("validation accuracy", test_acc)

predic = model.predict([x_test])
print(predic)

print(np.argmax(predic[0]))

plt.imshow(X_test[0])

print(np.argmax(predic[128]))

# Commented out IPython magic to ensure Python compatibility.
from google.colab import files
from keras.preprocessing import image
import matplotlib.image as mpimg
import cv2
# %matplotlib inline
print("Masukkan gambar")
uploaded = files.upload()

for fn in uploaded.keys():

# predicting images
  path = fn
  img = cv2.imread(path)
  gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
  resized = cv2.resize(gray,(28,28), interpolation=cv2.INTER_AREA)
  newimg = tf.keras.utils.normalize(resized,axis=1)
  newimg = np.array(newimg).reshape(-1,img_size,img_size,1)
  imgplot = plt.imshow(img)
  plt.show()
  #x = image.img_to_array(img)
  #x = np.expand_dims(x, axis=0)

  #images = np.vstack([x])
  classes = model.predict(newimg)
  output = np.argmax(classes)
  # print(fn)
  if output==0:
    print('Hasil Pengenalan : Angka 0')
  elif output==1:
    print('Hasil Pengenalan : Angka 1')
  elif output==2:
    print('Hasil Pengenalan : Angka 2')
  elif output==3:
    print('Hasil Pengenalan : Angka 3')
  elif output==4:
    print('Hasil Pengenalan : Angka 4')
  elif output==5:
    print('Hasil Pengenalan : Angka 5')
  elif output==6:
    print('Hasil Pengenalan : Angka 6')
  elif output==7:
    print('Hasil Pengenalan : Angka 7')
  elif output==8:
    print('Hasil Pengenalan : Angka 8')
  else:
    print('Hasil Pengenalan : Angka 9')